//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PPPK_Project.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class pppkDBEntities : DbContext
    {
        public pppkDBEntities()
            : base("name=pppkDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CostOfGasRefill> CostOfGasRefill { get; set; }
        public virtual DbSet<Driver> Driver { get; set; }
        public virtual DbSet<OccupyedVehicle> OccupyedVehicle { get; set; }
        public virtual DbSet<OccupyingDriver> OccupyingDriver { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<TravelRoute> TravelRoute { get; set; }
        public virtual DbSet<TravelWarrant> TravelWarrant { get; set; }
        public virtual DbSet<Vehicle> Vehicle { get; set; }
    
        public virtual int clean_database()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("clean_database");
        }
    
        public virtual ObjectResult<Nullable<int>> delete_driver(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("delete_driver", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> delete_service(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("delete_service", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> delete_travelroute(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("delete_travelroute", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> delete_travelwarrant(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("delete_travelwarrant", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> delete_vehicle(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("delete_vehicle", idParameter);
        }
    
        public virtual int disable_id_insert()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("disable_id_insert");
        }
    
        public virtual int enable_id_insert()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("enable_id_insert");
        }
    
        public virtual int insert_costofgasrefill(Nullable<System.DateTime> datecreated, string nameofplacerefilled, Nullable<int> amountofgasrefilledinliters, Nullable<int> costofgasrefilled, Nullable<int> travelwarrantID)
        {
            var datecreatedParameter = datecreated.HasValue ?
                new ObjectParameter("datecreated", datecreated) :
                new ObjectParameter("datecreated", typeof(System.DateTime));
    
            var nameofplacerefilledParameter = nameofplacerefilled != null ?
                new ObjectParameter("nameofplacerefilled", nameofplacerefilled) :
                new ObjectParameter("nameofplacerefilled", typeof(string));
    
            var amountofgasrefilledinlitersParameter = amountofgasrefilledinliters.HasValue ?
                new ObjectParameter("amountofgasrefilledinliters", amountofgasrefilledinliters) :
                new ObjectParameter("amountofgasrefilledinliters", typeof(int));
    
            var costofgasrefilledParameter = costofgasrefilled.HasValue ?
                new ObjectParameter("costofgasrefilled", costofgasrefilled) :
                new ObjectParameter("costofgasrefilled", typeof(int));
    
            var travelwarrantIDParameter = travelwarrantID.HasValue ?
                new ObjectParameter("travelwarrantID", travelwarrantID) :
                new ObjectParameter("travelwarrantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_costofgasrefill", datecreatedParameter, nameofplacerefilledParameter, amountofgasrefilledinlitersParameter, costofgasrefilledParameter, travelwarrantIDParameter);
        }
    
        public virtual int insert_driver(string fname, string lastname, string phonenum, string driverlicensenum)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var phonenumParameter = phonenum != null ?
                new ObjectParameter("phonenum", phonenum) :
                new ObjectParameter("phonenum", typeof(string));
    
            var driverlicensenumParameter = driverlicensenum != null ?
                new ObjectParameter("driverlicensenum", driverlicensenum) :
                new ObjectParameter("driverlicensenum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_driver", fnameParameter, lastnameParameter, phonenumParameter, driverlicensenumParameter);
        }
    
        public virtual int insert_dummy_data()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_dummy_data");
        }
    
        public virtual int insert_service(string placeofservice, string nameofservice, Nullable<int> costofservice, string info, Nullable<int> vehicleID)
        {
            var placeofserviceParameter = placeofservice != null ?
                new ObjectParameter("placeofservice", placeofservice) :
                new ObjectParameter("placeofservice", typeof(string));
    
            var nameofserviceParameter = nameofservice != null ?
                new ObjectParameter("nameofservice", nameofservice) :
                new ObjectParameter("nameofservice", typeof(string));
    
            var costofserviceParameter = costofservice.HasValue ?
                new ObjectParameter("costofservice", costofservice) :
                new ObjectParameter("costofservice", typeof(int));
    
            var infoParameter = info != null ?
                new ObjectParameter("info", info) :
                new ObjectParameter("info", typeof(string));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("vehicleID", vehicleID) :
                new ObjectParameter("vehicleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_service", placeofserviceParameter, nameofserviceParameter, costofserviceParameter, infoParameter, vehicleIDParameter);
        }
    
        public virtual int insert_travelwarrant(Nullable<System.DateTime> datecreated, Nullable<System.DateTime> dateofstart, Nullable<System.DateTime> dateofending, Nullable<int> iDstatus, Nullable<int> iDDriver, Nullable<int> iDVehicle)
        {
            var datecreatedParameter = datecreated.HasValue ?
                new ObjectParameter("datecreated", datecreated) :
                new ObjectParameter("datecreated", typeof(System.DateTime));
    
            var dateofstartParameter = dateofstart.HasValue ?
                new ObjectParameter("dateofstart", dateofstart) :
                new ObjectParameter("dateofstart", typeof(System.DateTime));
    
            var dateofendingParameter = dateofending.HasValue ?
                new ObjectParameter("dateofending", dateofending) :
                new ObjectParameter("dateofending", typeof(System.DateTime));
    
            var iDstatusParameter = iDstatus.HasValue ?
                new ObjectParameter("IDstatus", iDstatus) :
                new ObjectParameter("IDstatus", typeof(int));
    
            var iDDriverParameter = iDDriver.HasValue ?
                new ObjectParameter("IDDriver", iDDriver) :
                new ObjectParameter("IDDriver", typeof(int));
    
            var iDVehicleParameter = iDVehicle.HasValue ?
                new ObjectParameter("IDVehicle", iDVehicle) :
                new ObjectParameter("IDVehicle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_travelwarrant", datecreatedParameter, dateofstartParameter, dateofendingParameter, iDstatusParameter, iDDriverParameter, iDVehicleParameter);
        }
    
        public virtual int insert_trevelroute(Nullable<decimal> x_departure, Nullable<decimal> y_departure, Nullable<decimal> x_arrival, Nullable<decimal> y_arrival, Nullable<decimal> distance, Nullable<decimal> speed, Nullable<int> iDtravelwarrant)
        {
            var x_departureParameter = x_departure.HasValue ?
                new ObjectParameter("x_departure", x_departure) :
                new ObjectParameter("x_departure", typeof(decimal));
    
            var y_departureParameter = y_departure.HasValue ?
                new ObjectParameter("y_departure", y_departure) :
                new ObjectParameter("y_departure", typeof(decimal));
    
            var x_arrivalParameter = x_arrival.HasValue ?
                new ObjectParameter("x_arrival", x_arrival) :
                new ObjectParameter("x_arrival", typeof(decimal));
    
            var y_arrivalParameter = y_arrival.HasValue ?
                new ObjectParameter("y_arrival", y_arrival) :
                new ObjectParameter("y_arrival", typeof(decimal));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("distance", distance) :
                new ObjectParameter("distance", typeof(decimal));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("speed", speed) :
                new ObjectParameter("speed", typeof(decimal));
    
            var iDtravelwarrantParameter = iDtravelwarrant.HasValue ?
                new ObjectParameter("IDtravelwarrant", iDtravelwarrant) :
                new ObjectParameter("IDtravelwarrant", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_trevelroute", x_departureParameter, y_departureParameter, x_arrivalParameter, y_arrivalParameter, distanceParameter, speedParameter, iDtravelwarrantParameter);
        }
    
        public virtual int insert_vehicle(string type, string model, Nullable<System.DateTime> prodyear, Nullable<int> startingkilometers, Nullable<int> currentkilometers)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var prodyearParameter = prodyear.HasValue ?
                new ObjectParameter("prodyear", prodyear) :
                new ObjectParameter("prodyear", typeof(System.DateTime));
    
            var startingkilometersParameter = startingkilometers.HasValue ?
                new ObjectParameter("startingkilometers", startingkilometers) :
                new ObjectParameter("startingkilometers", typeof(int));
    
            var currentkilometersParameter = currentkilometers.HasValue ?
                new ObjectParameter("currentkilometers", currentkilometers) :
                new ObjectParameter("currentkilometers", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_vehicle", typeParameter, modelParameter, prodyearParameter, startingkilometersParameter, currentkilometersParameter);
        }
    
        public virtual ObjectResult<select_all_travelwarrants_Result> select_all_travelwarrants()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_all_travelwarrants_Result>("select_all_travelwarrants");
        }
    
        public virtual ObjectResult<select_travelwarrant_Result> select_travelwarrant(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_travelwarrant_Result>("select_travelwarrant", idParameter);
        }
    }
}
